//CALCULATION OF USART_ DIV:
//USART_DIV	= (FPCLK) / 8 ( 2- OVER8)* BAUD RATE
//IN our example consider baud rate =9600, fpclk =2 m, over8=16
//Then,
//USART_DIV = 13.0208

//STEPS FOR CALCULATING VALUE TO BE LOADED IN DIV_FRACTION & DIV_MANTISSA(USART_BRR)

//To program USARTDIV = 0d13.0208
//This leads to:
//DIV_Fraction = 16*0d0.0208 = 0d0.3328
//The nearest real number is 0d10 = 0x0
//DIV_Mantissa = mantissa (0d123.0208) = 0d13 = 0X0D
//Then, USART_BRR = 0xDO hence  USARTDIV = 0d13.0208

//PROGRAM:
/*USART  DATA TRANSMISSION */

typedef unsigned int uint32_t;
typedef unsigned short uint16_t;

/*CONFIGURATION OF  USART*/
#define RCC_APB2ENR (uint32_t*) (0x40023800 + 0x20)
#define USART_SR (uint32_t*) (0x40013800+0x00)
#define USART_DR (uint32_t*) (0x40013800+0x04)		//status register
#define USART_CR1 (uint32_t*) (0x40013800+0x0C)		//set transmission,wordlength
#define USART_CR2 (uint32_t*) (0x40013800+0x10)
#define USART_BRR (uint32_t*) (0x40013800+0x08)		//set baud rate

/* for LED initialisations*/
#define RCC_AHBENR (uint32_t*) (0x40023800 + 0x00001C)
#define GPIOB_MODER (uint32_t*) (0x40020400 + 0x00)
#define GPIOB_OTYPER (uint32_t*) (0x40020400 + 0x04)
#define GPIOB_OSPEEDR (uint32_t*) (0x40020400 + 0x08)
#define GPIOB_PUPDR (uint32_t*) (0x40020400 + 0x0C)
#define GPIOB_BSRRL (uint32_t*) (0x40020400 + 0x18)

/*for configuring alternate functions*/
#define GPIOA_MODER (uint32_t*) (0x40020000 + 0x00)
#define GPIOA_OTYPER (uint32_t*) (0x40020000 + 0x04)
#define GPIOA_OSPEEDR (uint32_t*) (0x40020000 + 0x08)
#define GPIOA_PUPDR (uint32_t*) (0x40020000 + 0x0C)
#define GPIOA_BSRRL (uint32_t*) (0x40020000 + 0x18)
#define GPIOA_AFRH (uint32_t*) (0x40020000 + 0x24)

char a[50]={"ED502: ARM CORTEX STM32 USART1 TX "};
int i;

int main(void)
{
	

	//initilaisation for led
	*RCC_AHBENR = 0x00000003; /* Enable GPIOB clock */
	*RCC_APB2ENR =0x0004000;	/*enable clock for usart*/
	*GPIOB_MODER &= ~(0x0000F000);
	*GPIOB_MODER |= (0x00005000); /* General purpose output mode*/
	*GPIOB_OTYPER &= ~(0x000000C0); /* Output push-pull */
	*GPIOB_OSPEEDR &= ~(0x0000F000);
	*GPIOB_OSPEEDR |= (0x00005000); /* 2 MHz Low speed */
	*GPIOB_PUPDR &= ~(0x0000F000); /* No pull-up, pull-down */
	
	//initialisation for USART1
	//*RCC_APB2ENR = (1UL << 14); 
	*USART_CR1=0x00002008; 	/*enable usart, set the TE bit and set word length*/
	*USART_CR2=0x00000800;	/*enable no: of stop bit=1*/
	*USART_BRR=0x000000D0;	/*set the baud rate= 9600, over8=0,*/

	*GPIOA_AFRH = 0x00000770;		//PA9/PA10 GPIO as Alternate function
	*GPIOA_MODER &= ~(0x0000F000); 
	*GPIOA_MODER |= 0x00280000;  // MODE10 & MODE9
	*GPIOA_OTYPER = 0x00000000;  // 
	*GPIOA_OSPEEDR &= ~(0x0000F000);
	*GPIOA_OSPEEDR |= 0x003C0000;
	*GPIOA_PUPDR =0x00140000;

	
	while(1)
	{
for(i=0;a[i]!='\0';i++)
{
	*GPIOB_BSRRL = 1UL<<6 ;		/* blue led on*/
			*USART_DR= (unsigned) a[i];
	*GPIOB_BSRRL = 1UL<<7;	
			while(*USART_SR!=0x000000C0);
//wait untill txe bit and TC bit is set indicating tranmission is complete
	//		*GPIOB_BSRRL = 1UL<<7;		/* green led on*/
			
}
	*GPIOB_BSRRL = 1UL<<23;/* green led off*/

}
}

void SystemInit()
{}